
stm32f401ccu6_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea0  08000ea0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ea8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08000eac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000eac  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001595  00000000  00000000  0002002e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c0  00000000  00000000  000215c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00021a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000f0  00000000  00000000  00021bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c77  00000000  00000000  00021ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001813  00000000  00000000  00022917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009fd1  00000000  00000000  0002412a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e0fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d8  00000000  00000000  0002e14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e88 	.word	0x08000e88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000e88 	.word	0x08000e88

080001d4 <main>:
void RecvSlvData_closetx (GPIO_RegDef_t *pGPIOx, uint8_t PinNo, SPI_RegDef_t *pSPIx, uint8_t slv_no);
void SPI_PinInit(GPIO_Handle_t GPIOPin, GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t AltFn);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b0a0      	sub	sp, #128	; 0x80
 80001d8:	af02      	add	r7, sp, #8

	// GPIO Button
	GPIO_Handle_t Button_A0;

	//PERIPHERAL CLOCK
	GPIO_Peri_ClkCtrl(DRV_GPIOA, ENABLE);
 80001da:	2101      	movs	r1, #1
 80001dc:	488c      	ldr	r0, [pc, #560]	; (8000410 <main+0x23c>)
 80001de:	f000 f9db 	bl	8000598 <GPIO_Peri_ClkCtrl>
	GPIO_Peri_ClkCtrl(DRV_GPIOB, ENABLE);
 80001e2:	2101      	movs	r1, #1
 80001e4:	488b      	ldr	r0, [pc, #556]	; (8000414 <main+0x240>)
 80001e6:	f000 f9d7 	bl	8000598 <GPIO_Peri_ClkCtrl>

	// Pin Configurations
	SPI_PinInit(MOSI_A7, DRV_GPIOA, GPIO_PIN_NO_7, GPIO_AF5);
 80001ea:	2305      	movs	r3, #5
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	2307      	movs	r3, #7
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	4b87      	ldr	r3, [pc, #540]	; (8000410 <main+0x23c>)
 80001f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80001f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80001fa:	f000 fd7e 	bl	8000cfa <SPI_PinInit>
	SPI_PinInit(MISO_A6, DRV_GPIOA, GPIO_PIN_NO_6, GPIO_AF5);
 80001fe:	2305      	movs	r3, #5
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2306      	movs	r3, #6
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	4b82      	ldr	r3, [pc, #520]	; (8000410 <main+0x23c>)
 8000208:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800020c:	ca07      	ldmia	r2, {r0, r1, r2}
 800020e:	f000 fd74 	bl	8000cfa <SPI_PinInit>
	SPI_PinInit(SCK_A5, DRV_GPIOA, GPIO_PIN_NO_5, GPIO_AF5);
 8000212:	2305      	movs	r3, #5
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2305      	movs	r3, #5
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	4b7d      	ldr	r3, [pc, #500]	; (8000410 <main+0x23c>)
 800021c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000220:	ca07      	ldmia	r2, {r0, r1, r2}
 8000222:	f000 fd6a 	bl	8000cfa <SPI_PinInit>



	//SPI Setup
	SPI1.pSPIx = DRV_SPI1;
 8000226:	4b7c      	ldr	r3, [pc, #496]	; (8000418 <main+0x244>)
 8000228:	63fb      	str	r3, [r7, #60]	; 0x3c
	SPI1.SPI_Config.SPIBusMode = SPI_FULL_DUP;
 800022a:	2300      	movs	r3, #0
 800022c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	SPI1.SPI_Config.SPIDFF = SPI_DATALEN8;
 8000230:	2300      	movs	r3, #0
 8000232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	SPI1.SPI_Config.SPIDevMode = SPI_MAST_DEV;
 8000236:	2301      	movs	r3, #1
 8000238:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	SPI1.SPI_Config.SPISCKSpeed = SPI_SPD_FBY64;
 800023c:	2305      	movs	r3, #5
 800023e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	SPI1.SPI_Config.SPI_CPHA = SPI_LEAD_EDG;
 8000242:	2301      	movs	r3, #1
 8000244:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	SPI1.SPI_Config.SPI_CPOL = SPI_POL_LOW;
 8000248:	2300      	movs	r3, #0
 800024a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	SPI1.SPI_Config.SPI_SSM = SPI_SSM_DI;
 800024e:	2300      	movs	r3, #0
 8000250:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	SPI_Init(&SPI1, 1);
 8000254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f000 fcc0 	bl	8000be0 <SPI_Init>

	Button_A0.pGPIOBasAddr = DRV_GPIOA;
 8000260:	4b6b      	ldr	r3, [pc, #428]	; (8000410 <main+0x23c>)
 8000262:	603b      	str	r3, [r7, #0]
	Button_A0.GPIO_PinConf.GPIO_PinMode = GPIOINPUT;
 8000264:	2300      	movs	r3, #0
 8000266:	717b      	strb	r3, [r7, #5]
	Button_A0.GPIO_PinConf.GPIO_PinNo = GPIO_PIN_NO_0;
 8000268:	2300      	movs	r3, #0
 800026a:	713b      	strb	r3, [r7, #4]
	Button_A0.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 800026c:	2300      	movs	r3, #0
 800026e:	723b      	strb	r3, [r7, #8]
	Button_A0.GPIO_PinConf.GPIO_PinPuPdCtrl = PULLUP;
 8000270:	2301      	movs	r3, #1
 8000272:	71fb      	strb	r3, [r7, #7]
	Button_A0.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000274:	2303      	movs	r3, #3
 8000276:	71bb      	strb	r3, [r7, #6]

	Slave1_B4.pGPIOBasAddr = DRV_GPIOB;
 8000278:	4b66      	ldr	r3, [pc, #408]	; (8000414 <main+0x240>)
 800027a:	633b      	str	r3, [r7, #48]	; 0x30
	Slave1_B4.GPIO_PinConf.GPIO_PinMode = GPIOOUTPUT;
 800027c:	2301      	movs	r3, #1
 800027e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	Slave1_B4.GPIO_PinConf.GPIO_PinNo = GPIO_PIN_NO_4;
 8000282:	2304      	movs	r3, #4
 8000284:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	Slave1_B4.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 8000288:	2300      	movs	r3, #0
 800028a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	Slave1_B4.GPIO_PinConf.GPIO_PinPuPdCtrl = PULLUP;
 800028e:	2301      	movs	r3, #1
 8000290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	Slave1_B4.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000294:	2303      	movs	r3, #3
 8000296:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//
	Slave2_B5.pGPIOBasAddr = DRV_GPIOB;
 800029a:	4b5e      	ldr	r3, [pc, #376]	; (8000414 <main+0x240>)
 800029c:	627b      	str	r3, [r7, #36]	; 0x24
	Slave2_B5.GPIO_PinConf.GPIO_PinMode = GPIOOUTPUT;
 800029e:	2301      	movs	r3, #1
 80002a0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Slave2_B5.GPIO_PinConf.GPIO_PinNo = GPIO_PIN_NO_5;
 80002a4:	2305      	movs	r3, #5
 80002a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Slave2_B5.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 80002aa:	2300      	movs	r3, #0
 80002ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	Slave2_B5.GPIO_PinConf.GPIO_PinPuPdCtrl = PULLUP;
 80002b0:	2301      	movs	r3, #1
 80002b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	Slave2_B5.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002b6:	2303      	movs	r3, #3
 80002b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//
	Slave3_B6.pGPIOBasAddr = DRV_GPIOB;
 80002bc:	4b55      	ldr	r3, [pc, #340]	; (8000414 <main+0x240>)
 80002be:	61bb      	str	r3, [r7, #24]
	Slave3_B6.GPIO_PinConf.GPIO_PinMode = GPIOOUTPUT;
 80002c0:	2301      	movs	r3, #1
 80002c2:	777b      	strb	r3, [r7, #29]
	Slave3_B6.GPIO_PinConf.GPIO_PinNo = GPIO_PIN_NO_6;
 80002c4:	2306      	movs	r3, #6
 80002c6:	773b      	strb	r3, [r7, #28]
	Slave3_B6.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 80002c8:	2300      	movs	r3, #0
 80002ca:	f887 3020 	strb.w	r3, [r7, #32]
	Slave3_B6.GPIO_PinConf.GPIO_PinPuPdCtrl = PULLUP;
 80002ce:	2301      	movs	r3, #1
 80002d0:	77fb      	strb	r3, [r7, #31]
	Slave3_B6.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002d2:	2303      	movs	r3, #3
 80002d4:	77bb      	strb	r3, [r7, #30]

	Slave4_B7.pGPIOBasAddr = DRV_GPIOB;
 80002d6:	4b4f      	ldr	r3, [pc, #316]	; (8000414 <main+0x240>)
 80002d8:	60fb      	str	r3, [r7, #12]
	Slave4_B7.GPIO_PinConf.GPIO_PinMode = GPIOOUTPUT;
 80002da:	2301      	movs	r3, #1
 80002dc:	747b      	strb	r3, [r7, #17]
	Slave4_B7.GPIO_PinConf.GPIO_PinNo = GPIO_PIN_NO_7;
 80002de:	2307      	movs	r3, #7
 80002e0:	743b      	strb	r3, [r7, #16]
	Slave4_B7.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	753b      	strb	r3, [r7, #20]
	Slave4_B7.GPIO_PinConf.GPIO_PinPuPdCtrl = PULLUP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	74fb      	strb	r3, [r7, #19]
	Slave4_B7.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80002ea:	2303      	movs	r3, #3
 80002ec:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&Button_A0);
 80002ee:	463b      	mov	r3, r7
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fa05 	bl	8000700 <GPIO_Init>
	GPIO_Init(&Slave1_B4);
 80002f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 fa00 	bl	8000700 <GPIO_Init>
	GPIO_Init(&Slave2_B5);
 8000300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f9fb 	bl	8000700 <GPIO_Init>
	GPIO_Init(&Slave3_B6);
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f9f6 	bl	8000700 <GPIO_Init>
	GPIO_Init(&Slave4_B7);
 8000314:	f107 030c 	add.w	r3, r7, #12
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f9f1 	bl	8000700 <GPIO_Init>

	// Initialise the slaves disabled at first(active low)
	uint8_t buttonStatReg = 0x0;
 800031e:	2300      	movs	r3, #0
 8000320:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	GPIO_WriteOPin(DRV_GPIOB, GPIO_PIN_NO_4, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2104      	movs	r1, #4
 8000328:	483a      	ldr	r0, [pc, #232]	; (8000414 <main+0x240>)
 800032a:	f000 fbc6 	bl	8000aba <GPIO_WriteOPin>
	GPIO_WriteOPin(DRV_GPIOB, GPIO_PIN_NO_5, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	2105      	movs	r1, #5
 8000332:	4838      	ldr	r0, [pc, #224]	; (8000414 <main+0x240>)
 8000334:	f000 fbc1 	bl	8000aba <GPIO_WriteOPin>
	GPIO_WriteOPin(DRV_GPIOB, GPIO_PIN_NO_6, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2106      	movs	r1, #6
 800033c:	4835      	ldr	r0, [pc, #212]	; (8000414 <main+0x240>)
 800033e:	f000 fbbc 	bl	8000aba <GPIO_WriteOPin>
	GPIO_WriteOPin(DRV_GPIOB, GPIO_PIN_NO_7, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	2107      	movs	r1, #7
 8000346:	4833      	ldr	r0, [pc, #204]	; (8000414 <main+0x240>)
 8000348:	f000 fbb7 	bl	8000aba <GPIO_WriteOPin>
	// infinite looping
	for(;;)
	{
	// Read the trigger from button
	uint8_t buttonRead = GPIO_ReadIPin(DRV_GPIOA, GPIO_PIN_NO_0);
 800034c:	2100      	movs	r1, #0
 800034e:	4830      	ldr	r0, [pc, #192]	; (8000410 <main+0x23c>)
 8000350:	f000 fb9e 	bl	8000a90 <GPIO_ReadIPin>
 8000354:	4603      	mov	r3, r0
 8000356:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	delay(600);
 800035a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800035e:	f000 fbd1 	bl	8000b04 <delay>
		if(buttonRead == 0)
 8000362:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000366:	2b00      	cmp	r3, #0
 8000368:	d104      	bne.n	8000374 <main+0x1a0>
		{
			buttonStatReg = ~buttonStatReg;
 800036a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800036e:	43db      	mvns	r3, r3
 8000370:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		if(buttonStatReg)
 8000374:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0e7      	beq.n	800034c <main+0x178>
		{
			/*
			 * Section 1: From initial Trigger to Data Request Trigger
			 */

			ReqSlave(DRV_GPIOB, GPIO_PIN_NO_4, DRV_SPI1, SLAVE1_ACK_TRIG);
 800037c:	238f      	movs	r3, #143	; 0x8f
 800037e:	4a26      	ldr	r2, [pc, #152]	; (8000418 <main+0x244>)
 8000380:	2104      	movs	r1, #4
 8000382:	4824      	ldr	r0, [pc, #144]	; (8000414 <main+0x240>)
 8000384:	f000 f84e 	bl	8000424 <ReqSlave>
			ReqSlave(DRV_GPIOB, GPIO_PIN_NO_5, DRV_SPI1, SLAVE2_ACK_TRIG);
 8000388:	23af      	movs	r3, #175	; 0xaf
 800038a:	4a23      	ldr	r2, [pc, #140]	; (8000418 <main+0x244>)
 800038c:	2105      	movs	r1, #5
 800038e:	4821      	ldr	r0, [pc, #132]	; (8000414 <main+0x240>)
 8000390:	f000 f848 	bl	8000424 <ReqSlave>
			ReqSlave(DRV_GPIOB, GPIO_PIN_NO_6, DRV_SPI1, SLAVE3_ACK_TRIG);
 8000394:	23cf      	movs	r3, #207	; 0xcf
 8000396:	4a20      	ldr	r2, [pc, #128]	; (8000418 <main+0x244>)
 8000398:	2106      	movs	r1, #6
 800039a:	481e      	ldr	r0, [pc, #120]	; (8000414 <main+0x240>)
 800039c:	f000 f842 	bl	8000424 <ReqSlave>
			ReqSlave(DRV_GPIOB, GPIO_PIN_NO_7, DRV_SPI1, SLAVE4_ACK_TRIG);
 80003a0:	23ef      	movs	r3, #239	; 0xef
 80003a2:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <main+0x244>)
 80003a4:	2107      	movs	r1, #7
 80003a6:	481b      	ldr	r0, [pc, #108]	; (8000414 <main+0x240>)
 80003a8:	f000 f83c 	bl	8000424 <ReqSlave>

			/*
			 * Data Receive trigger resulting in transmission of data by slave
			 */

			RecvSlvData_closetx(DRV_GPIOB, GPIO_PIN_NO_4, DRV_SPI1, 1);
 80003ac:	2301      	movs	r3, #1
 80003ae:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <main+0x244>)
 80003b0:	2104      	movs	r1, #4
 80003b2:	4818      	ldr	r0, [pc, #96]	; (8000414 <main+0x240>)
 80003b4:	f000 f88c 	bl	80004d0 <RecvSlvData_closetx>
			RecvSlvData_closetx(DRV_GPIOB, GPIO_PIN_NO_5, DRV_SPI1, 2);
 80003b8:	2302      	movs	r3, #2
 80003ba:	4a17      	ldr	r2, [pc, #92]	; (8000418 <main+0x244>)
 80003bc:	2105      	movs	r1, #5
 80003be:	4815      	ldr	r0, [pc, #84]	; (8000414 <main+0x240>)
 80003c0:	f000 f886 	bl	80004d0 <RecvSlvData_closetx>
			RecvSlvData_closetx(DRV_GPIOB, GPIO_PIN_NO_6, DRV_SPI1, 3);
 80003c4:	2303      	movs	r3, #3
 80003c6:	4a14      	ldr	r2, [pc, #80]	; (8000418 <main+0x244>)
 80003c8:	2106      	movs	r1, #6
 80003ca:	4812      	ldr	r0, [pc, #72]	; (8000414 <main+0x240>)
 80003cc:	f000 f880 	bl	80004d0 <RecvSlvData_closetx>
			RecvSlvData_closetx(DRV_GPIOB, GPIO_PIN_NO_7, DRV_SPI1, 4);
 80003d0:	2304      	movs	r3, #4
 80003d2:	4a11      	ldr	r2, [pc, #68]	; (8000418 <main+0x244>)
 80003d4:	2107      	movs	r1, #7
 80003d6:	480f      	ldr	r0, [pc, #60]	; (8000414 <main+0x240>)
 80003d8:	f000 f87a 	bl	80004d0 <RecvSlvData_closetx>


			/*
			 * Compilation and averaging the data for the weight
			 */
			for (int var = 0; var < SLAVES; ++var)
 80003dc:	2300      	movs	r3, #0
 80003de:	673b      	str	r3, [r7, #112]	; 0x70
 80003e0:	e00c      	b.n	80003fc <main+0x228>
			{
				Average_Weight += Slav_weight[var];
 80003e2:	4a0e      	ldr	r2, [pc, #56]	; (800041c <main+0x248>)
 80003e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003e6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <main+0x24c>)
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	4413      	add	r3, r2
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <main+0x24c>)
 80003f4:	801a      	strh	r2, [r3, #0]
			for (int var = 0; var < SLAVES; ++var)
 80003f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003f8:	3301      	adds	r3, #1
 80003fa:	673b      	str	r3, [r7, #112]	; 0x70
 80003fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80003fe:	2b03      	cmp	r3, #3
 8000400:	ddef      	ble.n	80003e2 <main+0x20e>
			}
			Average_Weight /= SLAVES;
 8000402:	4b07      	ldr	r3, [pc, #28]	; (8000420 <main+0x24c>)
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	089b      	lsrs	r3, r3, #2
 8000408:	b29a      	uxth	r2, r3
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <main+0x24c>)
 800040c:	801a      	strh	r2, [r3, #0]
	{
 800040e:	e79d      	b.n	800034c <main+0x178>
 8000410:	40020000 	.word	0x40020000
 8000414:	40020400 	.word	0x40020400
 8000418:	40013000 	.word	0x40013000
 800041c:	20000024 	.word	0x20000024
 8000420:	2000002c 	.word	0x2000002c

08000424 <ReqSlave>:




void ReqSlave(GPIO_RegDef_t *pGPIOx, uint8_t PinNo, SPI_RegDef_t *pSPIx, uint8_t slav_ack)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	461a      	mov	r2, r3
 8000430:	460b      	mov	r3, r1
 8000432:	72fb      	strb	r3, [r7, #11]
 8000434:	4613      	mov	r3, r2
 8000436:	72bb      	strb	r3, [r7, #10]
	// Set NSS low to activate slave
	GPIO_WriteOPin(pGPIOx, PinNo, SLAVE_ENABLE);
 8000438:	7afb      	ldrb	r3, [r7, #11]
 800043a:	2200      	movs	r2, #0
 800043c:	4619      	mov	r1, r3
 800043e:	68f8      	ldr	r0, [r7, #12]
 8000440:	f000 fb3b 	bl	8000aba <GPIO_WriteOPin>

	// Send Trigger
	SPI_DataSend(pSPIx, &initate_Trig, sizeof(initate_Trig));
 8000444:	2201      	movs	r2, #1
 8000446:	491e      	ldr	r1, [pc, #120]	; (80004c0 <ReqSlave+0x9c>)
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 fc75 	bl	8000d38 <SPI_DataSend>

	// dummy read to remove contents of slave RX
	uint8_t dummyread;
	SPI_DataReceive(pSPIx, &dummyread, sizeof(dummyread));
 800044e:	f107 0316 	add.w	r3, r7, #22
 8000452:	2201      	movs	r2, #1
 8000454:	4619      	mov	r1, r3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f000 fca5 	bl	8000da6 <SPI_DataReceive>

	// Send a dummy byte to receive ack or nack from slave
	uint8_t dummyWrite = DUMMY_BYTE;
 800045c:	23ee      	movs	r3, #238	; 0xee
 800045e:	757b      	strb	r3, [r7, #21]
	SPI_DataSend(pSPIx, &dummyWrite, sizeof(dummyWrite));
 8000460:	f107 0315 	add.w	r3, r7, #21
 8000464:	2201      	movs	r2, #1
 8000466:	4619      	mov	r1, r3
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 fc65 	bl	8000d38 <SPI_DataSend>

	// Receive Data from slave
	SPI_DataReceive(DRV_SPI1, &SlaveAck, sizeof(SlaveAck));
 800046e:	2201      	movs	r2, #1
 8000470:	4914      	ldr	r1, [pc, #80]	; (80004c4 <ReqSlave+0xa0>)
 8000472:	4815      	ldr	r0, [pc, #84]	; (80004c8 <ReqSlave+0xa4>)
 8000474:	f000 fc97 	bl	8000da6 <SPI_DataReceive>

	// Check for ACK byte
	if((SlaveAck == SLAVE1_ACK_TRIG))
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <ReqSlave+0xa0>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b8f      	cmp	r3, #143	; 0x8f
 800047e:	d114      	bne.n	80004aa <ReqSlave+0x86>
	{
		// Send Trigger to request data
		SPI_DataSend(pSPIx, &Data_Trig, sizeof(Data_Trig));
 8000480:	2201      	movs	r2, #1
 8000482:	4912      	ldr	r1, [pc, #72]	; (80004cc <ReqSlave+0xa8>)
 8000484:	6878      	ldr	r0, [r7, #4]
 8000486:	f000 fc57 	bl	8000d38 <SPI_DataSend>

		// Receive dummy read of data request trigger
		SPI_DataReceive(pSPIx, &dummyread, sizeof(dummyread));
 800048a:	f107 0316 	add.w	r3, r7, #22
 800048e:	2201      	movs	r2, #1
 8000490:	4619      	mov	r1, r3
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f000 fc87 	bl	8000da6 <SPI_DataReceive>

		uint8_t temp = ((pSPIx->SPI_SR) & (0x1 << SPI_SR_BSY));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	b2db      	uxtb	r3, r3
 800049e:	f003 0310 	and.w	r3, r3, #16
 80004a2:	75fb      	strb	r3, [r7, #23]

		// wait until Transmission is over
		while(temp == 0);
 80004a4:	7dfb      	ldrb	r3, [r7, #23]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0fc      	beq.n	80004a4 <ReqSlave+0x80>
	}

	// Disable slave input to give it time to request data from sensor and process it
	GPIO_WriteOPin(pGPIOx, PinNo, GPIO_PIN_SET);
 80004aa:	7afb      	ldrb	r3, [r7, #11]
 80004ac:	2201      	movs	r2, #1
 80004ae:	4619      	mov	r1, r3
 80004b0:	68f8      	ldr	r0, [r7, #12]
 80004b2:	f000 fb02 	bl	8000aba <GPIO_WriteOPin>
}
 80004b6:	bf00      	nop
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000020 	.word	0x20000020
 80004c8:	40013000 	.word	0x40013000
 80004cc:	20000001 	.word	0x20000001

080004d0 <RecvSlvData_closetx>:


void RecvSlvData_closetx (GPIO_RegDef_t *pGPIOx, uint8_t PinNo, SPI_RegDef_t *pSPIx, uint8_t slv_no)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	461a      	mov	r2, r3
 80004dc:	460b      	mov	r3, r1
 80004de:	72fb      	strb	r3, [r7, #11]
 80004e0:	4613      	mov	r3, r2
 80004e2:	72bb      	strb	r3, [r7, #10]
	// Enable slave and receive data
	GPIO_WriteOPin(pGPIOx, GPIO_PIN_NO_4, SLAVE_ENABLE);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2104      	movs	r1, #4
 80004e8:	68f8      	ldr	r0, [r7, #12]
 80004ea:	f000 fae6 	bl	8000aba <GPIO_WriteOPin>

	// Send dummy data to receive the weight acquired by slave
	uint16_t DummyWrite[4];
	SPI_DataSend(pSPIx, (uint8_t*)(DummyWrite- 1 + slv_no), sizeof(DummyWrite[slv_no - 1]));
 80004ee:	7abb      	ldrb	r3, [r7, #10]
 80004f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80004f4:	3b01      	subs	r3, #1
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	f107 0210 	add.w	r2, r7, #16
 80004fc:	4413      	add	r3, r2
 80004fe:	2202      	movs	r2, #2
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f000 fc18 	bl	8000d38 <SPI_DataSend>

	// Receive data from the slave
	SPI_DataReceive(pSPIx, (uint8_t*)(Slav_weight- 1 + slv_no), sizeof(Slav_weight[slv_no - 1]));
 8000508:	7abb      	ldrb	r3, [r7, #10]
 800050a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800050e:	3b01      	subs	r3, #1
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <RecvSlvData_closetx+0x70>)
 8000514:	4413      	add	r3, r2
 8000516:	2202      	movs	r2, #2
 8000518:	4619      	mov	r1, r3
 800051a:	6878      	ldr	r0, [r7, #4]
 800051c:	f000 fc43 	bl	8000da6 <SPI_DataReceive>

	// If the transmission is complete end communication
	while(!(pSPIx->SPI_SR & (0x1 << SPI_SR_BSY)));
 8000520:	bf00      	nop
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <RecvSlvData_closetx+0x52>
	GPIO_WriteOPin(pGPIOx, GPIO_PIN_NO_4, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2104      	movs	r1, #4
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f000 fac1 	bl	8000aba <GPIO_WriteOPin>
}
 8000538:	bf00      	nop
 800053a:	3718      	adds	r7, #24
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000024 	.word	0x20000024

08000544 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000544:	480d      	ldr	r0, [pc, #52]	; (800057c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000546:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000548:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <LoopForever+0x6>)
  ldr r1, =_edata
 800054e:	490d      	ldr	r1, [pc, #52]	; (8000584 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <LoopForever+0xe>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000554:	e002      	b.n	800055c <LoopCopyDataInit>

08000556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055a:	3304      	adds	r3, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800055c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000560:	d3f9      	bcc.n	8000556 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000564:	4c0a      	ldr	r4, [pc, #40]	; (8000590 <LoopForever+0x16>)
  movs r3, #0
 8000566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000568:	e001      	b.n	800056e <LoopFillZerobss>

0800056a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800056c:	3204      	adds	r2, #4

0800056e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000570:	d3fb      	bcc.n	800056a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000572:	f000 fc65 	bl	8000e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000576:	f7ff fe2d 	bl	80001d4 <main>

0800057a <LoopForever>:

LoopForever:
  b LoopForever
 800057a:	e7fe      	b.n	800057a <LoopForever>
  ldr   r0, =_estack
 800057c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000584:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000588:	08000ea8 	.word	0x08000ea8
  ldr r2, =_sbss
 800058c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000590:	20000030 	.word	0x20000030

08000594 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000594:	e7fe      	b.n	8000594 <ADC_IRQHandler>
	...

08000598 <GPIO_Peri_ClkCtrl>:
 * @Note              -  none

 */
//Peripheral Clock Setup
void GPIO_Peri_ClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t GPIOCLKEN)																	//Clock Control of Peripheral
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
	if(GPIOCLKEN == ENABLE){
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d14c      	bne.n	8000644 <GPIO_Peri_ClkCtrl+0xac>
		switch ((uint32_t) pGPIOx) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a4d      	ldr	r2, [pc, #308]	; (80006e4 <GPIO_Peri_ClkCtrl+0x14c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d041      	beq.n	8000636 <GPIO_Peri_ClkCtrl+0x9e>
 80005b2:	4a4c      	ldr	r2, [pc, #304]	; (80006e4 <GPIO_Peri_ClkCtrl+0x14c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	f200 808f 	bhi.w	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 80005ba:	4a4b      	ldr	r2, [pc, #300]	; (80006e8 <GPIO_Peri_ClkCtrl+0x150>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d02c      	beq.n	800061a <GPIO_Peri_ClkCtrl+0x82>
 80005c0:	4a49      	ldr	r2, [pc, #292]	; (80006e8 <GPIO_Peri_ClkCtrl+0x150>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	f200 8088 	bhi.w	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 80005c8:	4a48      	ldr	r2, [pc, #288]	; (80006ec <GPIO_Peri_ClkCtrl+0x154>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d01e      	beq.n	800060c <GPIO_Peri_ClkCtrl+0x74>
 80005ce:	4a47      	ldr	r2, [pc, #284]	; (80006ec <GPIO_Peri_ClkCtrl+0x154>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	f200 8081 	bhi.w	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 80005d6:	4a46      	ldr	r2, [pc, #280]	; (80006f0 <GPIO_Peri_ClkCtrl+0x158>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d010      	beq.n	80005fe <GPIO_Peri_ClkCtrl+0x66>
 80005dc:	4a44      	ldr	r2, [pc, #272]	; (80006f0 <GPIO_Peri_ClkCtrl+0x158>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d87a      	bhi.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 80005e2:	4a44      	ldr	r2, [pc, #272]	; (80006f4 <GPIO_Peri_ClkCtrl+0x15c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d003      	beq.n	80005f0 <GPIO_Peri_ClkCtrl+0x58>
 80005e8:	4a43      	ldr	r2, [pc, #268]	; (80006f8 <GPIO_Peri_ClkCtrl+0x160>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d01c      	beq.n	8000628 <GPIO_Peri_ClkCtrl+0x90>
					break;
				case (uint32_t)DRV_GPIOH: GPIOH_PCLK_ENA();
					break;
			}
		}
	}
 80005ee:	e073      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOA: GPIOA_PCLK_ENA();
 80005f0:	4b42      	ldr	r3, [pc, #264]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f4:	4a41      	ldr	r2, [pc, #260]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 80005fc:	e06c      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOB: GPIOB_PCLK_ENA();
 80005fe:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a3e      	ldr	r2, [pc, #248]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 800060a:	e065      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOC: GPIOC_PCLK_ENA();
 800060c:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8000618:	e05e      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOD: GPIOD_PCLK_ENA();
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a37      	ldr	r2, [pc, #220]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8000626:	e057      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOE: GPIOE_PCLK_ENA();
 8000628:	4b34      	ldr	r3, [pc, #208]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a33      	ldr	r2, [pc, #204]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8000634:	e050      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
			case (uint32_t)DRV_GPIOH: GPIOH_PCLK_ENA();
 8000636:	4b31      	ldr	r3, [pc, #196]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a30      	ldr	r2, [pc, #192]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800063c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8000642:	e049      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
		switch ((uint32_t)pGPIOx){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <GPIO_Peri_ClkCtrl+0x14c>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d03e      	beq.n	80006ca <GPIO_Peri_ClkCtrl+0x132>
 800064c:	4a25      	ldr	r2, [pc, #148]	; (80006e4 <GPIO_Peri_ClkCtrl+0x14c>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d842      	bhi.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 8000652:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <GPIO_Peri_ClkCtrl+0x150>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d02a      	beq.n	80006ae <GPIO_Peri_ClkCtrl+0x116>
 8000658:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <GPIO_Peri_ClkCtrl+0x150>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d83c      	bhi.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 800065e:	4a23      	ldr	r2, [pc, #140]	; (80006ec <GPIO_Peri_ClkCtrl+0x154>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d01d      	beq.n	80006a0 <GPIO_Peri_ClkCtrl+0x108>
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <GPIO_Peri_ClkCtrl+0x154>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d836      	bhi.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <GPIO_Peri_ClkCtrl+0x158>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d010      	beq.n	8000692 <GPIO_Peri_ClkCtrl+0xfa>
 8000670:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <GPIO_Peri_ClkCtrl+0x158>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d830      	bhi.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <GPIO_Peri_ClkCtrl+0x15c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d003      	beq.n	8000684 <GPIO_Peri_ClkCtrl+0xec>
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <GPIO_Peri_ClkCtrl+0x160>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d01c      	beq.n	80006bc <GPIO_Peri_ClkCtrl+0x124>
	}
 8000682:	e029      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOA: GPIOA_PCLK_ENA();
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 8000690:	e022      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOB: GPIOB_PCLK_ENA();
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a19      	ldr	r2, [pc, #100]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 800069e:	e01b      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOC: GPIOC_PCLK_ENA();
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a15      	ldr	r2, [pc, #84]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006a6:	f043 0304 	orr.w	r3, r3, #4
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 80006ac:	e014      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOD: GPIOD_PCLK_ENA();
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 80006ba:	e00d      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOE: GPIOE_PCLK_ENA();
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 80006c8:	e006      	b.n	80006d8 <GPIO_Peri_ClkCtrl+0x140>
				case (uint32_t)DRV_GPIOH: GPIOH_PCLK_ENA();
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <GPIO_Peri_ClkCtrl+0x164>)
 80006d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
					break;
 80006d6:	bf00      	nop
	}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021c00 	.word	0x40021c00
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020100 	.word	0x40020100
 80006fc:	40023800 	.word	0x40023800

08000700 <GPIO_Init>:


//GPIO Initialisation

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	//1. Configure the mode of GPIO port
	if(pGPIOHandle->GPIO_PinConf.GPIO_PinMode <= GPIOANALOG){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d81f      	bhi.n	8000750 <GPIO_Init+0x50>
		pGPIOHandle->pGPIOBasAddr->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	2103      	movs	r1, #3
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOBasAddr->MODER |= (pGPIOHandle->GPIO_PinConf.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	4619      	mov	r1, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	fa01 f303 	lsl.w	r3, r1, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	430a      	orrs	r2, r1
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e0e9      	b.n	8000924 <GPIO_Init+0x224>
	}
	else{
		if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode == GPIORISEDGEDET) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b05      	cmp	r3, #5
 8000756:	d117      	bne.n	8000788 <GPIO_Init+0x88>
			{// 1. Configure the Rising trigger selection register
				DRV_EXTI->EXTI_RTSR |= (0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000758:	4b61      	ldr	r3, [pc, #388]	; (80008e0 <GPIO_Init+0x1e0>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	7912      	ldrb	r2, [r2, #4]
 8000760:	4611      	mov	r1, r2
 8000762:	2201      	movs	r2, #1
 8000764:	408a      	lsls	r2, r1
 8000766:	4611      	mov	r1, r2
 8000768:	4a5d      	ldr	r2, [pc, #372]	; (80008e0 <GPIO_Init+0x1e0>)
 800076a:	430b      	orrs	r3, r1
 800076c:	6093      	str	r3, [r2, #8]
				DRV_EXTI->EXTI_FTSR &= ~(0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 800076e:	4b5c      	ldr	r3, [pc, #368]	; (80008e0 <GPIO_Init+0x1e0>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	7912      	ldrb	r2, [r2, #4]
 8000776:	4611      	mov	r1, r2
 8000778:	2201      	movs	r2, #1
 800077a:	408a      	lsls	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a57      	ldr	r2, [pc, #348]	; (80008e0 <GPIO_Init+0x1e0>)
 8000782:	400b      	ands	r3, r1
 8000784:	60d3      	str	r3, [r2, #12]
 8000786:	e035      	b.n	80007f4 <GPIO_Init+0xf4>
			}


		}else if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode == GPIOFALEDGEDET) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	795b      	ldrb	r3, [r3, #5]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d117      	bne.n	80007c0 <GPIO_Init+0xc0>
			// 1. Configure the Falling trigger selection register
			DRV_EXTI->EXTI_FTSR |= (0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000790:	4b53      	ldr	r3, [pc, #332]	; (80008e0 <GPIO_Init+0x1e0>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	7912      	ldrb	r2, [r2, #4]
 8000798:	4611      	mov	r1, r2
 800079a:	2201      	movs	r2, #1
 800079c:	408a      	lsls	r2, r1
 800079e:	4611      	mov	r1, r2
 80007a0:	4a4f      	ldr	r2, [pc, #316]	; (80008e0 <GPIO_Init+0x1e0>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	60d3      	str	r3, [r2, #12]
			DRV_EXTI->EXTI_RTSR &= ~(0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <GPIO_Init+0x1e0>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	7912      	ldrb	r2, [r2, #4]
 80007ae:	4611      	mov	r1, r2
 80007b0:	2201      	movs	r2, #1
 80007b2:	408a      	lsls	r2, r1
 80007b4:	43d2      	mvns	r2, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a49      	ldr	r2, [pc, #292]	; (80008e0 <GPIO_Init+0x1e0>)
 80007ba:	400b      	ands	r3, r1
 80007bc:	6093      	str	r3, [r2, #8]
 80007be:	e019      	b.n	80007f4 <GPIO_Init+0xf4>
		}
		else if (pGPIOHandle->GPIO_PinConf.GPIO_PinMode == GPIORISFALDET) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	795b      	ldrb	r3, [r3, #5]
 80007c4:	2b06      	cmp	r3, #6
 80007c6:	d115      	bne.n	80007f4 <GPIO_Init+0xf4>
			// 1. Configure the Rising & Falling trigger selection register
			DRV_EXTI->EXTI_FTSR |= (0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <GPIO_Init+0x1e0>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	7912      	ldrb	r2, [r2, #4]
 80007d0:	4611      	mov	r1, r2
 80007d2:	2201      	movs	r2, #1
 80007d4:	408a      	lsls	r2, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a41      	ldr	r2, [pc, #260]	; (80008e0 <GPIO_Init+0x1e0>)
 80007da:	430b      	orrs	r3, r1
 80007dc:	60d3      	str	r3, [r2, #12]
			DRV_EXTI->EXTI_RTSR |= (0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 80007de:	4b40      	ldr	r3, [pc, #256]	; (80008e0 <GPIO_Init+0x1e0>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	7912      	ldrb	r2, [r2, #4]
 80007e6:	4611      	mov	r1, r2
 80007e8:	2201      	movs	r2, #1
 80007ea:	408a      	lsls	r2, r1
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a3c      	ldr	r2, [pc, #240]	; (80008e0 <GPIO_Init+0x1e0>)
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6093      	str	r3, [r2, #8]
		}
		// 2. Configure the GPIO port selection in SYSCNFG_EXTICR
		switch (pGPIOHandle->GPIO_PinConf.GPIO_PinNo/4) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	089b      	lsrs	r3, r3, #2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d843      	bhi.n	8000888 <GPIO_Init+0x188>
 8000800:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <GPIO_Init+0x108>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000819 	.word	0x08000819
 800080c:	08000835 	.word	0x08000835
 8000810:	08000851 	.word	0x08000851
 8000814:	0800086d 	.word	0x0800086d
			case 0:
				DRV_SYSCNFG->EXTICR1 |= (1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 4));
 8000818:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <GPIO_Init+0x1e4>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	7912      	ldrb	r2, [r2, #4]
 8000820:	f002 0203 	and.w	r2, r2, #3
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	4611      	mov	r1, r2
 800082c:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <GPIO_Init+0x1e4>)
 800082e:	430b      	orrs	r3, r1
 8000830:	6093      	str	r3, [r2, #8]
				break;
 8000832:	e02a      	b.n	800088a <GPIO_Init+0x18a>
			case 1:
				DRV_SYSCNFG->EXTICR2 |= (1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 4));
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <GPIO_Init+0x1e4>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	7912      	ldrb	r2, [r2, #4]
 800083c:	f002 0203 	and.w	r2, r2, #3
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <GPIO_Init+0x1e4>)
 800084a:	430b      	orrs	r3, r1
 800084c:	60d3      	str	r3, [r2, #12]
				break;
 800084e:	e01c      	b.n	800088a <GPIO_Init+0x18a>
			case 2:
				DRV_SYSCNFG->EXTICR3 |= (1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 4));
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <GPIO_Init+0x1e4>)
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	7912      	ldrb	r2, [r2, #4]
 8000858:	f002 0203 	and.w	r2, r2, #3
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a1f      	ldr	r2, [pc, #124]	; (80008e4 <GPIO_Init+0x1e4>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6113      	str	r3, [r2, #16]
				break;
 800086a:	e00e      	b.n	800088a <GPIO_Init+0x18a>
			case 3:
				DRV_SYSCNFG->EXTICR4 |= (1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 4));
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <GPIO_Init+0x1e4>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	7912      	ldrb	r2, [r2, #4]
 8000874:	f002 0203 	and.w	r2, r2, #3
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	4611      	mov	r1, r2
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <GPIO_Init+0x1e4>)
 8000882:	430b      	orrs	r3, r1
 8000884:	6153      	str	r3, [r2, #20]
				break;
 8000886:	e000      	b.n	800088a <GPIO_Init+0x18a>
			default:
				break;
 8000888:	bf00      	nop
		}

		// 3. Enable the EXTI interrupt delivery using  IMR
		uint8_t port_code;
		port_code = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOBasAddr);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <GPIO_Init+0x1e8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d035      	beq.n	8000900 <GPIO_Init+0x200>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <GPIO_Init+0x1ec>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d01d      	beq.n	80008da <GPIO_Init+0x1da>
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <GPIO_Init+0x1f0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d016      	beq.n	80008d6 <GPIO_Init+0x1d6>
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a11      	ldr	r2, [pc, #68]	; (80008f4 <GPIO_Init+0x1f4>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d00f      	beq.n	80008d2 <GPIO_Init+0x1d2>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <GPIO_Init+0x1f8>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d008      	beq.n	80008ce <GPIO_Init+0x1ce>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <GPIO_Init+0x1fc>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <GPIO_Init+0x1ca>
 80008c6:	2307      	movs	r3, #7
 80008c8:	e01b      	b.n	8000902 <GPIO_Init+0x202>
 80008ca:	2300      	movs	r3, #0
 80008cc:	e019      	b.n	8000902 <GPIO_Init+0x202>
 80008ce:	2304      	movs	r3, #4
 80008d0:	e017      	b.n	8000902 <GPIO_Init+0x202>
 80008d2:	2303      	movs	r3, #3
 80008d4:	e015      	b.n	8000902 <GPIO_Init+0x202>
 80008d6:	2302      	movs	r3, #2
 80008d8:	e013      	b.n	8000902 <GPIO_Init+0x202>
 80008da:	2301      	movs	r3, #1
 80008dc:	e011      	b.n	8000902 <GPIO_Init+0x202>
 80008de:	bf00      	nop
 80008e0:	40013c00 	.word	0x40013c00
 80008e4:	40013800 	.word	0x40013800
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40020c00 	.word	0x40020c00
 80008f8:	40020100 	.word	0x40020100
 80008fc:	40021c00 	.word	0x40021c00
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
		SYSCNFG_PCLK_ENA();
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <GPIO_Init+0x388>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000908:	4a5f      	ldr	r2, [pc, #380]	; (8000a88 <GPIO_Init+0x388>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6453      	str	r3, [r2, #68]	; 0x44
		DRV_EXTI->EXTI_IMR |= (port_code << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000910:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <GPIO_Init+0x38c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	7bfa      	ldrb	r2, [r7, #15]
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	7909      	ldrb	r1, [r1, #4]
 800091a:	408a      	lsls	r2, r1
 800091c:	4611      	mov	r1, r2
 800091e:	4a5b      	ldr	r2, [pc, #364]	; (8000a8c <GPIO_Init+0x38c>)
 8000920:	430b      	orrs	r3, r1
 8000922:	6013      	str	r3, [r2, #0]
	}

	//2. Speed Configuration
	pGPIOHandle->pGPIOBasAddr->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	689a      	ldr	r2, [r3, #8]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2103      	movs	r1, #3
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43db      	mvns	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	400a      	ands	r2, r1
 8000940:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOBasAddr->OSPEEDER |= (pGPIOHandle->GPIO_PinConf.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	799b      	ldrb	r3, [r3, #6]
 800094c:	4619      	mov	r1, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4619      	mov	r1, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	430a      	orrs	r2, r1
 8000960:	609a      	str	r2, [r3, #8]

	//3. Pull up pull down configurations
	pGPIOHandle->pGPIOBasAddr->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	791b      	ldrb	r3, [r3, #4]
 800096c:	4619      	mov	r1, r3
 800096e:	2301      	movs	r3, #1
 8000970:	408b      	lsls	r3, r1
 8000972:	43db      	mvns	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	400a      	ands	r2, r1
 800097c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOBasAddr->OTYPER |= (pGPIOHandle->GPIO_PinConf.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	7a1b      	ldrb	r3, [r3, #8]
 8000988:	4619      	mov	r1, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	791b      	ldrb	r3, [r3, #4]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	4619      	mov	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	430a      	orrs	r2, r1
 800099a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOBasAddr->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	68da      	ldr	r2, [r3, #12]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	2103      	movs	r1, #3
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	400a      	ands	r2, r1
 80009b8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOBasAddr->PUPDR |= (pGPIOHandle->GPIO_PinConf.GPIO_PinPuPdCtrl << (2 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	79db      	ldrb	r3, [r3, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	430a      	orrs	r2, r1
 80009d8:	60da      	str	r2, [r3, #12]

	//4. Alternate functionality configuration
	if(pGPIOHandle->GPIO_PinConf.GPIO_PinMode == GPIOALTFN){
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	795b      	ldrb	r3, [r3, #5]
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d14d      	bne.n	8000a7e <GPIO_Init+0x37e>
		if(pGPIOHandle->GPIO_PinConf.GPIO_PinNo <= 7)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	2b07      	cmp	r3, #7
 80009e8:	d81e      	bhi.n	8000a28 <GPIO_Init+0x328>
			{
			pGPIOHandle->pGPIOBasAddr->AFRL &= ~(0xF << (4 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a1a      	ldr	r2, [r3, #32]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	210f      	movs	r1, #15
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	400a      	ands	r2, r1
 8000a06:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOBasAddr->AFRL |= (pGPIOHandle->GPIO_PinConf.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConf.GPIO_PinNo));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6a1a      	ldr	r2, [r3, #32]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7a5b      	ldrb	r3, [r3, #9]
 8000a12:	4619      	mov	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	791b      	ldrb	r3, [r3, #4]
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	430a      	orrs	r2, r1
 8000a26:	621a      	str	r2, [r3, #32]
			}
		if(pGPIOHandle->GPIO_PinConf.GPIO_PinNo >= 8 && pGPIOHandle->GPIO_PinConf.GPIO_PinNo <= 15)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	2b07      	cmp	r3, #7
 8000a2e:	d926      	bls.n	8000a7e <GPIO_Init+0x37e>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	791b      	ldrb	r3, [r3, #4]
 8000a34:	2b0f      	cmp	r3, #15
 8000a36:	d822      	bhi.n	8000a7e <GPIO_Init+0x37e>
			{
			pGPIOHandle->pGPIOBasAddr->AFRL &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 8)));
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6a1a      	ldr	r2, [r3, #32]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	210f      	movs	r1, #15
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	4619      	mov	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	400a      	ands	r2, r1
 8000a58:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOBasAddr->AFRH |= (pGPIOHandle->GPIO_PinConf.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConf.GPIO_PinNo % 8)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7a5b      	ldrb	r3, [r3, #9]
 8000a64:	4619      	mov	r1, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	791b      	ldrb	r3, [r3, #4]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	4619      	mov	r1, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
			}
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40013c00 	.word	0x40013c00

08000a90 <GPIO_ReadIPin>:
 * @Note              -  none

 */
// Input Reads
uint8_t GPIO_ReadIPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNo)																	//Read from single pin
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> GPIO_PinNo) & (0x1));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	78fb      	ldrb	r3, [r7, #3]
 8000aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	73fb      	strb	r3, [r7, #15]
	return value;
 8000aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <GPIO_WriteOPin>:
 *
 * @Note              -  none

 */
void GPIO_WriteOPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIO_PinNo, uint8_t GPIOVAL)														//Write to single pin
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	70fb      	strb	r3, [r7, #3]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70bb      	strb	r3, [r7, #2]
	if(GPIOVAL == SET)
 8000aca:	78bb      	ldrb	r3, [r7, #2]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d109      	bne.n	8000ae4 <GPIO_WriteOPin+0x2a>
	{
		//write 1 to the output pin
		pGPIOx->ODR |= (1 << GPIO_PinNo);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	78fa      	ldrb	r2, [r7, #3]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	431a      	orrs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	615a      	str	r2, [r3, #20]
	else
	{
		//write 0 to the output pin
		pGPIOx->ODR &= ~(0x1 << GPIO_PinNo);
	}
}
 8000ae2:	e009      	b.n	8000af8 <GPIO_WriteOPin+0x3e>
		pGPIOx->ODR &= ~(0x1 << GPIO_PinNo);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	78fa      	ldrb	r2, [r7, #3]
 8000aea:	2101      	movs	r1, #1
 8000aec:	fa01 f202 	lsl.w	r2, r1, r2
 8000af0:	43d2      	mvns	r2, r2
 8000af2:	401a      	ands	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	615a      	str	r2, [r3, #20]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <delay>:
}


// Time delay

void delay(uint32_t microseconds) {
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    // Assuming the system clock is running at 84 MHz
    uint32_t count = (84 * microseconds/5); // Adjust the divisor based on your clock speed and optimization level
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2254      	movs	r2, #84	; 0x54
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	4a0f      	ldr	r2, [pc, #60]	; (8000b54 <delay+0x50>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < count; i++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	e00c      	b.n	8000b3e <delay+0x3a>
        for (uint8_t var = 0; var < 10; ++var) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	74fb      	strb	r3, [r7, #19]
 8000b28:	e003      	b.n	8000b32 <delay+0x2e>
			__asm__("nop"); // No Operation (NOP) instruction to waste time
 8000b2a:	bf00      	nop
        for (uint8_t var = 0; var < 10; ++var) {
 8000b2c:	7cfb      	ldrb	r3, [r7, #19]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	74fb      	strb	r3, [r7, #19]
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	d9f8      	bls.n	8000b2a <delay+0x26>
    for (uint32_t i = 0; i < count; i++) {
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d3ee      	bcc.n	8000b24 <delay+0x20>
        }
    }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	cccccccd 	.word	0xcccccccd

08000b58 <SPI_Peri_ClkCtrl>:
 *
 */
//Peripheral Clock Setup

void SPI_Peri_ClkCtrl(SPI_RegDef_t *pSPIx, uint8_t SPICLKEN)																		//Clock Control of Peripheral
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
	if(SPICLKEN == 1){
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d12a      	bne.n	8000bc0 <SPI_Peri_ClkCtrl+0x68>
		if(pSPIx == DRV_SPI1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <SPI_Peri_ClkCtrl+0x74>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <SPI_Peri_ClkCtrl+0x28>
			SPI1_PCLK_ENA();
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == DRV_SPI3_I2S3)
			SPI3_I2S3_PCLK_ENA();
		else if (pSPIx == DRV_SPI4)
			SPI4_PCLK_ENA();
	}
}
 8000b7e:	e01f      	b.n	8000bc0 <SPI_Peri_ClkCtrl+0x68>
		else if (pSPIx == DRV_SPI2_I2S2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <SPI_Peri_ClkCtrl+0x7c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d106      	bne.n	8000b96 <SPI_Peri_ClkCtrl+0x3e>
			SPI2_I2S2_PCLK_ENA();
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b94:	e014      	b.n	8000bc0 <SPI_Peri_ClkCtrl+0x68>
		else if (pSPIx == DRV_SPI3_I2S3)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a0f      	ldr	r2, [pc, #60]	; (8000bd8 <SPI_Peri_ClkCtrl+0x80>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d106      	bne.n	8000bac <SPI_Peri_ClkCtrl+0x54>
			SPI3_I2S3_PCLK_ENA();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000ba4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000baa:	e009      	b.n	8000bc0 <SPI_Peri_ClkCtrl+0x68>
		else if (pSPIx == DRV_SPI4)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <SPI_Peri_ClkCtrl+0x84>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d105      	bne.n	8000bc0 <SPI_Peri_ClkCtrl+0x68>
			SPI4_PCLK_ENA();
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SPI_Peri_ClkCtrl+0x78>)
 8000bba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bbe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40013000 	.word	0x40013000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	40003c00 	.word	0x40003c00
 8000bdc:	40013400 	.word	0x40013400

08000be0 <SPI_Init>:
 */


//Initialisation
void SPI_Init(SPI_Handle_t *pSPIHandle, uint8_t SSI)  																							//Initialise SPI
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
	SPI_Peri_ClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ffb0 	bl	8000b58 <SPI_Peri_ClkCtrl>
	pSPIHandle->pSPIx->SPI_CR1 &= ~((1 << 2) | (1 << 15) | (0x7 << 3) | (1 << 1) | (1 << 0) | (1 << 6) | (1 << 9) | (1 << 14) | (1 << 10));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	6812      	ldr	r2, [r2, #0]
 8000c02:	f423 4346 	bic.w	r3, r3, #50688	; 0xc600
 8000c06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c0a:	6013      	str	r3, [r2, #0]
	if(SSI){
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d016      	beq.n	8000c40 <SPI_Init+0x60>
		if (pSPIHandle->SPI_Config.SPI_SSM)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	7a9b      	ldrb	r3, [r3, #10]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00a      	beq.n	8000c30 <SPI_Init+0x50>
			{
				pSPIHandle->pSPIx->SPI_CR1 |= (SSI << 8);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	4619      	mov	r1, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	e007      	b.n	8000c40 <SPI_Init+0x60>
			}
		else
			{
				pSPIHandle->pSPIx->SPI_CR1 &= ~(1 << 8);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c3e:	601a      	str	r2, [r3, #0]
			}
		}

	if((pSPIHandle->SPI_Config.SPIBusMode == SPI_FULL_DUP) || (pSPIHandle->SPI_Config.SPIBusMode == SPI_HALF_DUP) || (pSPIHandle->SPI_Config.SPIBusMode == SPI_SLV_TXS) || (pSPIHandle->SPI_Config.SPIBusMode == SPI_MAS_TXS))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	795b      	ldrb	r3, [r3, #5]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00b      	beq.n	8000c60 <SPI_Init+0x80>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	795b      	ldrb	r3, [r3, #5]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d007      	beq.n	8000c60 <SPI_Init+0x80>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	795b      	ldrb	r3, [r3, #5]
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d003      	beq.n	8000c60 <SPI_Init+0x80>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d11f      	bne.n	8000ca0 <SPI_Init+0xc0>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= ((pSPIHandle->SPI_Config.SPIDevMode << 2) | (pSPIHandle->SPI_Config.SPIBusMode << 15) | (pSPIHandle->SPI_Config.SPISCKSpeed << 3) | (pSPIHandle->SPI_Config.SPI_CPOL << 1) | (pSPIHandle->SPI_Config.SPI_CPHA << 0) | (1 << 6) | (pSPIHandle->SPI_Config.SPI_SSM << 9));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	0099      	lsls	r1, r3, #2
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	795b      	ldrb	r3, [r3, #5]
 8000c70:	03db      	lsls	r3, r3, #15
 8000c72:	4319      	orrs	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	799b      	ldrb	r3, [r3, #6]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4319      	orrs	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7a1b      	ldrb	r3, [r3, #8]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	430b      	orrs	r3, r1
 8000c84:	6879      	ldr	r1, [r7, #4]
 8000c86:	7a49      	ldrb	r1, [r1, #9]
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a9b      	ldrb	r3, [r3, #10]
 8000c92:	025b      	lsls	r3, r3, #9
 8000c94:	430b      	orrs	r3, r1
 8000c96:	4619      	mov	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
	}
	if ((pSPIHandle->SPI_Config.SPIDevMode == SPI_MAST_DEV) || (pSPIHandle->SPI_Config.SPIDevMode == SPI_SLAV_DEV))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	791b      	ldrb	r3, [r3, #4]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <SPI_Init+0xd0>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d120      	bne.n	8000cf2 <SPI_Init+0x112>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= ((pSPIHandle->SPI_Config.SPIDevMode << 2) | (pSPIHandle->SPI_Config.SPIBusMode << 15) | (pSPIHandle->SPI_Config.SPISCKSpeed << 3) | (pSPIHandle->SPI_Config.SPI_CPOL << 1) | (pSPIHandle->SPI_Config.SPI_CPHA << 0) | (1 << 6) | (pSPIHandle->SPI_Config.SPI_SSM << 9) | (1 << 10));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	7912      	ldrb	r2, [r2, #4]
 8000cba:	0091      	lsls	r1, r2, #2
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	7952      	ldrb	r2, [r2, #5]
 8000cc0:	03d2      	lsls	r2, r2, #15
 8000cc2:	4311      	orrs	r1, r2
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	7992      	ldrb	r2, [r2, #6]
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	4311      	orrs	r1, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	7a12      	ldrb	r2, [r2, #8]
 8000cd0:	0052      	lsls	r2, r2, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	7a49      	ldrb	r1, [r1, #9]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	f042 0140 	orr.w	r1, r2, #64	; 0x40
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	7a92      	ldrb	r2, [r2, #10]
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cf0:	601a      	str	r2, [r3, #0]
	}
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <SPI_PinInit>:
 *
 * @Note              -  none
 *
 */
void SPI_PinInit(GPIO_Handle_t GPIOPin, GPIO_RegDef_t *pGPIOx, uint8_t PinNo, uint8_t AltFn)
{
 8000cfa:	b590      	push	{r4, r7, lr}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	1d3c      	adds	r4, r7, #4
 8000d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000d06:	603b      	str	r3, [r7, #0]
	GPIOPin.pGPIOBasAddr = pGPIOx;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	607b      	str	r3, [r7, #4]
	GPIOPin.GPIO_PinConf.GPIO_PinNo = PinNo;
 8000d0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d10:	723b      	strb	r3, [r7, #8]
	GPIOPin.GPIO_PinConf.GPIO_PinMode = GPIOALTFN;
 8000d12:	2302      	movs	r3, #2
 8000d14:	727b      	strb	r3, [r7, #9]
	GPIOPin.GPIO_PinConf.GPIO_PinSpeed = GPIO_SPEED_MED;
 8000d16:	2301      	movs	r3, #1
 8000d18:	72bb      	strb	r3, [r7, #10]
	GPIOPin.GPIO_PinConf.GPIO_PinPuPdCtrl = NOPUPD;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	72fb      	strb	r3, [r7, #11]
	GPIOPin.GPIO_PinConf.GPIO_PinOPType = GPIO_OP_TYPE_PUPD;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	733b      	strb	r3, [r7, #12]
	GPIOPin.GPIO_PinConf.GPIO_PinAltFunMode = AltFn;
 8000d22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d26:	737b      	strb	r3, [r7, #13]
	GPIO_Init(&GPIOPin);
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fce8 	bl	8000700 <GPIO_Init>
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}

08000d38 <SPI_DataSend>:
 *
 * @Note              -  none
 *
 */
void SPI_DataSend(SPI_RegDef_t *pSPIx, uint8_t *pTX_Buffer, uint32_t length)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	while(length > 0)
 8000d44:	e027      	b.n	8000d96 <SPI_DataSend+0x5e>
	{
		// Wait until TX Register is empty
		while(SPI_GetFlagStatus(pSPIx, SPI_SR_TXE));
 8000d46:	bf00      	nop
 8000d48:	2104      	movs	r1, #4
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f000 f862 	bl	8000e14 <SPI_GetFlagStatus>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f8      	bne.n	8000d48 <SPI_DataSend+0x10>
		// Check for DFF bit in CR1
		if((pSPIx->SPI_CR1) & (0x1 << SPI_CR1_DFF))
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00e      	beq.n	8000d80 <SPI_DataSend+0x48>
		{
			pSPIx->SPI_DR = *((uint16_t*)pTX_Buffer);
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	60da      	str	r2, [r3, #12]
			length--;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	607b      	str	r3, [r7, #4]
			length--;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTX_Buffer++;
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	e00a      	b.n	8000d96 <SPI_DataSend+0x5e>
		}
		else
		{
			pSPIx->SPI_DR = *((uint8_t*)pTX_Buffer);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	60da      	str	r2, [r3, #12]
			length--;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
			(uint8_t*)pTX_Buffer++;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	3301      	adds	r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
	while(length > 0)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1d4      	bne.n	8000d46 <SPI_DataSend+0xe>
		}
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <SPI_DataReceive>:
 * @Note              -  none
 *
 */
// Receiving
void SPI_DataReceive(SPI_RegDef_t *pSPIx, uint8_t *pRX_Buffer, uint32_t length)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	while(length > 0)
 8000db2:	e027      	b.n	8000e04 <SPI_DataReceive+0x5e>
		{
			// Wait until RX Register is full
			while(SPI_GetFlagStatus(pSPIx, SPI_SR_RXNE));
 8000db4:	bf00      	nop
 8000db6:	2104      	movs	r1, #4
 8000db8:	68f8      	ldr	r0, [r7, #12]
 8000dba:	f000 f82b 	bl	8000e14 <SPI_GetFlagStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d1f8      	bne.n	8000db6 <SPI_DataReceive+0x10>
			// Check for DFF bit in CR1
			if((pSPIx->SPI_CR1) & (0x1 << SPI_CR1_DFF))
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00e      	beq.n	8000dee <SPI_DataReceive+0x48>
			{
				*((uint16_t*)pRX_Buffer) = pSPIx->SPI_DR;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	801a      	strh	r2, [r3, #0]
				length--;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
				length--;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRX_Buffer++;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	e00a      	b.n	8000e04 <SPI_DataReceive+0x5e>
			}
			else
			{
				*((uint8_t*)pRX_Buffer) = pSPIx->SPI_DR;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	701a      	strb	r2, [r3, #0]
				length--;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
				(uint8_t*)pRX_Buffer++;
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
	while(length > 0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1d4      	bne.n	8000db4 <SPI_DataReceive+0xe>
			}
		}
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SPI_GetFlagStatus>:
 *
 * @Note              -  none

 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	if(!((pSPIx->SPI_SR) & (0x1 << FlagName))) return SPI_PIN_RST;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2101      	movs	r1, #1
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	fa01 f202 	lsl.w	r2, r1, r2
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <SPI_GetFlagStatus+0x20>
 8000e30:	2300      	movs	r3, #0
 8000e32:	e000      	b.n	8000e36 <SPI_GetFlagStatus+0x22>
	else return SPI_PIN_SET;
 8000e34:	2301      	movs	r3, #1
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <__libc_init_array>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4d0d      	ldr	r5, [pc, #52]	; (8000e78 <__libc_init_array+0x38>)
 8000e44:	4c0d      	ldr	r4, [pc, #52]	; (8000e7c <__libc_init_array+0x3c>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	42a6      	cmp	r6, r4
 8000e4e:	d109      	bne.n	8000e64 <__libc_init_array+0x24>
 8000e50:	4d0b      	ldr	r5, [pc, #44]	; (8000e80 <__libc_init_array+0x40>)
 8000e52:	4c0c      	ldr	r4, [pc, #48]	; (8000e84 <__libc_init_array+0x44>)
 8000e54:	f000 f818 	bl	8000e88 <_init>
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	42a6      	cmp	r6, r4
 8000e60:	d105      	bne.n	8000e6e <__libc_init_array+0x2e>
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e68:	4798      	blx	r3
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7ee      	b.n	8000e4c <__libc_init_array+0xc>
 8000e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e72:	4798      	blx	r3
 8000e74:	3601      	adds	r6, #1
 8000e76:	e7f2      	b.n	8000e5e <__libc_init_array+0x1e>
 8000e78:	08000ea0 	.word	0x08000ea0
 8000e7c:	08000ea0 	.word	0x08000ea0
 8000e80:	08000ea0 	.word	0x08000ea0
 8000e84:	08000ea4 	.word	0x08000ea4

08000e88 <_init>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr

08000e94 <_fini>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	bf00      	nop
 8000e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9a:	bc08      	pop	{r3}
 8000e9c:	469e      	mov	lr, r3
 8000e9e:	4770      	bx	lr
